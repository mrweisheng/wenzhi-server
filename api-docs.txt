# 文智系统API文档

## 一、认证模块

### 1. 用户登录
POST /api/auth/login
描述: 用户登录获取令牌
请求参数:
  - username: 用户名(必填)
  - password: 密码(必填)
响应:
  {
    code: 0,
    data: {
      token: JWT访问令牌,
      refreshToken: JWT刷新令牌,
      expires: 过期时间戳,
      userInfo: {
        id: 用户ID,
        username: 用户名,
        role_id: 角色ID,
        real_name: 真实姓名,
        email: 邮箱,
        status: 状态,
        created_at: 创建时间,
        updated_at: 更新时间,
        role: {
          id: 角色ID,
          role_name: 角色名称
        },
        menus: [菜单权限列表]
      }
    }
  }
错误响应:
  {
    code: 1,
    message: "用户名或密码错误"
  }

### 2. 获取当前用户信息
GET /api/auth/userInfo
描述: 获取当前登录用户的详细信息
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: {
      id: 用户ID,
      username: 用户名,
      role_id: 角色ID,
      real_name: 真实姓名,
      email: 邮箱,
      status: 状态,
      created_at: 创建时间,
      updated_at: 更新时间,
      role: {
        id: 角色ID,
        role_name: 角色名称
      },
      menus: [菜单权限列表]
    }
  }
错误响应:
  {
    code: 1,
    message: "用户不存在"
  }

## 二、用户管理模块

### 1. 获取用户列表
GET /api/users
描述: 获取用户列表,支持条件查询
请求头:
  - Authorization: Bearer <token>
请求参数:
  - username: 用户名(可选,模糊查询)
  - role_id: 角色ID(可选)
  - status: 状态(可选)
响应:
  {
    code: 0,
    data: [
      {
        id: 用户ID,
        username: 用户名,
        role_id: 角色ID,
        role_name: 角色名称,
        real_name: 真实姓名,
        email: 邮箱,
        status: 状态
      }
    ]
  }

### 2. 创建用户
POST /api/users
描述: 创建新用户
请求头:
  - Authorization: Bearer <token>
请求参数:
  - username: 用户名(必填)
  - password: 密码(必填)
  - role_id: 角色ID(必填)
  - real_name: 真实姓名(可选)
  - email: 邮箱(可选)
  - status: 状态(可选)
响应:
  {
    code: 0,
    message: "创建成功"
  }
错误响应:
  {
    code: 1,
    message: "用户名已存在"
  }

### 3. 更新用户
PUT /api/users/:id
描述: 更新用户信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - username: 用户名(可选)
  - password: 密码(可选)
  - role_id: 角色ID(可选)
  - real_name: 真实姓名(可选)
  - email: 邮箱(可选)
  - status: 状态(可选)
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "用户名已存在"
  }

### 4. 删除用户
DELETE /api/users/:id
描述: 删除用户
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "删除成功"
  }

### 5. 更新用户状态
PUT /api/users/:id/status
描述: 更新用户状态(启用/禁用)
请求头:
  - Authorization: Bearer <token>
请求参数:
  - status: 状态(0-禁用,1-启用)
响应:
  {
    code: 0,
    message: "状态更新成功"
  }

### 6. 获取客服列表
GET /api/users/customer-service
描述: 获取所有客服角色的用户列表
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "success",
    data: [
      {
        id: 客服用户ID,
        username: 客服用户名,
        real_name: 真实姓名
      }
    ]
  }

### 7. 修改当前用户邮箱
PUT /api/users/email
描述: 更新当前登录用户的邮箱
请求头:
  - Authorization: Bearer <token>
请求参数:
  - email: 新邮箱地址(必填)
响应:
  {
    code: 0,
    message: "邮箱更新成功"
  }
错误响应:
  {
    code: 1,
    message: "邮箱格式不正确"
  }

### 8. 修改当前用户密码
PUT /api/users/password
描述: 更新当前登录用户的密码
请求头:
  - Authorization: Bearer <token>
请求参数:
  - oldPassword: 旧密码(必填)
  - newPassword: 新密码(必填)
响应:
  {
    code: 0,
    message: "密码修改成功"
  }
错误响应:
  {
    code: 1,
    message: "旧密码不正确"
  }
或
  {
    code: 1,
    message: "旧密码和新密码不能为空"
  }
或
  {
    code: 1,
    message: "新密码长度不能少于6个字符"
  }

## 三、角色管理模块

### 1. 获取角色列表
GET /api/roles
描述: 获取所有角色
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: [
      {
        id: 角色ID,
        role_name: 角色名称,
        created_at: 创建时间,
        updated_at: 更新时间
      }
    ]
  }

### 2. 创建角色
POST /api/roles
描述: 创建新角色
请求头:
  - Authorization: Bearer <token>
请求参数:
  - role_name: 角色名称(必填)
  - menu_ids: 菜单权限ID数组(可选)
响应:
  {
    code: 0,
    message: "创建成功"
  }
错误响应:
  {
    code: 1,
    message: "角色名已存在"
  }

### 3. 更新角色
PUT /api/roles/:id
描述: 更新角色信息和权限
请求头:
  - Authorization: Bearer <token>
请求参数:
  - role_name: 角色名称(可选)
  - menu_ids: 菜单权限ID数组(可选)
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "角色名已存在"
  }

### 4. 删除角色
DELETE /api/roles/:id
描述: 删除角色(如果角色下有用户则不允许删除)
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "删除成功"
  }
错误响应:
  {
    code: 1,
    message: "该角色下存在用户，无法删除"
  }

### 5. 获取角色菜单权限
GET /api/roles/:id/menus
描述: 获取指定角色的菜单权限列表
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: [
      {
        id: 菜单ID,
        name: 菜单名称,
        path: 路由路径,
        icon: 图标,
        sort: 排序号,
        parent_id: 父菜单ID,
        created_time: 创建时间
      }
    ]
  }

## 四、菜单管理模块

### 1. 获取菜单列表
GET /api/menus
描述: 获取所有菜单列表
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: [
      {
        id: 菜单ID,
        name: 菜单名称,
        path: 路由路径,
        icon: 图标,
        sort: 排序号,
        parent_id: 父菜单ID,
        created_time: 创建时间
      }
    ]
  }

### 2. 创建菜单
POST /api/menus
描述: 创建新菜单
请求头:
  - Authorization: Bearer <token>
请求参数:
  - name: 菜单名称(必填)
  - path: 路由路径(必填)
  - icon: 图标(可选)
  - sort: 排序号(可选)
  - parent_id: 父菜单ID(可选)
响应:
  {
    code: 0,
    message: "创建成功"
  }

### 3. 更新菜单
PUT /api/menus/:id
描述: 更新菜单信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - name: 菜单名称(可选)
  - icon: 图标(可选)
  - sort: 排序号(可选)
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "菜单不存在"
  }
或
  {
    code: 1,
    message: "没有要更新的字段"
  }

### 4. 删除菜单
DELETE /api/menus/:id
描述: 删除菜单
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "删除成功"
  }

## 五、写手管理模块

### 1. 获取写手列表
GET /api/writers
描述: 获取写手列表,支持分页和条件查询
请求头:
  - Authorization: Bearer <token>
请求参数:
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
  - writer_id: 写手ID(可选,精确匹配)
  - name: 写手姓名(可选,模糊匹配)
  - education: 学历(可选,精确匹配)
  - major: 专业(可选,模糊匹配)
  - writing_experience: 写作水平(可选,精确匹配)
  - starred: 是否星标(可选,布尔值)
  - processed: 是否已处理(可选,布尔值)
响应:
  {
    code: 0,
    data: {
      total: 总条数,
      list: [
        {
          id: 自增ID,
          writer_id: 写手ID,
          name: 姓名,
          education: 学历,
          major: 专业,
          writing_experience: 写作水平,
          specialized_content: 擅长内容,
          phone_1: 手机号1,
          phone_2: 手机号2,
          alipay_name: 支付宝姓名,
          alipay_account: 支付宝账号,
          id_number: 身份证号,
          ip_address: IP地址,
          starred: 是否星标,
          processed: 是否已处理,
          is_activated: 是否已开通账号(1-已开通,0-未开通),
          created_time: 创建时间,
          created_by: 创建人,
          last_modified_time: 最后修改时间,
          last_modified_by: 最后修改人
        }
      ]
    },
    message: "获取成功"
  }

### 2. 获取写手详情
GET /api/writers/:id
描述: 根据ID获取写手详细信息
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: {
      // 写手详细信息,字段同列表接口
      // 包括is_activated字段表示是否已开通账号(1-已开通,0-未开通)
      // 新增最新评分信息
      latest_rating: {
        id: 评分记录ID,
        score: 8.5,             // 评分分数
        comment: "评价内容",     // 评价内容
        date: "2024-03-30",     // 评分日期
        created_at: "2024-03-30 10:30:00",  // 创建时间
        updated_at: "2024-03-30 10:30:00",  // 更新时间
        quality_inspector: {
          id: 质检员ID,
          name: "质检员姓名"
        }
      }  // 如果没有评分记录，该字段为null
    },
    message: "获取成功"
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 3. 新增写手
POST /api/writers
描述: 新增写手信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - name: 姓名(必填)
  - education: 学历(必填)
  - major: 专业(必填)
  - writing_experience: 写作水平(必填,枚举值:大学水平/在职水平/事业单位水平/淘宝老手/在职老师/期刊报告科研)
  - specialized_content: 擅长内容(可选)
  - phone_1: 手机号1(可选)
  - phone_2: 手机号2(可选)
  - alipay_name: 支付宝姓名(可选)
  - alipay_account: 支付宝账号(可选)
  - id_number: 身份证号(可选)
  - ip_address: IP地址(可选)
响应:
  {
    code: 0,
    data: {
      id: 新增记录ID,
      writer_id: 系统生成的写手ID  // 格式: w + 年月日 + 序号(2位), 如 w24072001
    },
    message: "添加成功"
  }

### 4. 更新写手信息
PUT /api/writers/:id
描述: 更新写手信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - name: 姓名(可选)
  - education: 学历(可选)
  - major: 专业(可选)
  - writing_experience: 写作水平(可选)
  - specialized_content: 擅长内容(可选)
  - phone_1: 手机号1(可选)
  - phone_2: 手机号2(可选)
  - alipay_name: 支付宝姓名(可选)
  - alipay_account: 支付宝账号(可选)
  - id_number: 身份证号(可选)
  - starred: 是否星标(可选)
  - processed: 是否已处理(可选)
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 5. 删除写手
DELETE /api/writers/:id
描述: 删除写手信息
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "删除成功"
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 6. 批量删除写手
DELETE /api/writers
描述: 批量删除写手信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - ids: 写手记录ID数组(必填,请求体参数)
请求体示例:
  {
    "ids": [1, 2, 3]
  }
响应:
  {
    code: 0,
    message: "删除成功"
  }

### 7. 获取写手简要列表
GET /api/writers/list
描述: 获取所有写手列表（用于下拉选择）
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "success",
    data: [
      {
        id: 写手ID,
        writer_id: 写手编号,
        name: 写手姓名,
        phone_1: 手机号码,  // 可选，用于显示额外信息
        is_activated: 是否已开通账号(1-已开通,0-未开通)
      }
    ]
  }

### 8. 快速模糊搜索写手
GET /api/writers/quick-search
描述: 根据写手编号进行模糊搜索，适合前端输入框实时搜索，无需登录
请求参数:
  - keyword: 搜索关键字(必填，仅支持写手编号，至少2个字符)
  - page: 页码(可选，默认1)
  - pageSize: 每页条数(可选，默认10，最大20)
响应:
  {
    code: 0,
    data: [
      {
        id: 写手ID,
        writer_id: 写手编号,
        name: 写手姓名,
        phone_1: 手机号1,
        is_activated: 是否已开通账号(1-已开通,0-未开通)
      }
    ],
    message: "success"
  }
说明:
- 仅支持 writer_id（写手编号）的模糊搜索。
- 返回结果最多20条，适合前端实时输入搜索。
- keyword 长度不足2时返回空数组。
- 无需登录。

### 新增开放写手注册
POST /api/writers/open
描述: 任何人可提交写手信息，每个IP每分钟最多10次，无需登录

请求头:
  无

请求参数（application/json，与 /api/writers 完全一致）:
  - name: 姓名(必填)
  - education: 学历(必填)
  - major: 专业(必填)
  - writing_experience: 写作水平(必填, 枚举值: 大学水平/在职水平/事业单位水平/淘宝老手/在职老师/期刊报告科研)
  - specialized_content: 擅长内容(可选)
  - phone_1: 手机号1(可选)
  - phone_2: 手机号2(可选)
  - alipay_name: 支付宝姓名(可选)
  - alipay_account: 支付宝账号(可选)
  - id_number: 身份证号(可选)
  - ip_address: IP地址(可选)

请求体示例:
  {
    "name": "张三",
    "education": "本科",
    "major": "中文",
    "writing_experience": "大学水平",
    "specialized_content": "论文、报告",
    "phone_1": "13800000000",
    "alipay_name": "张三",
    "alipay_account": "zhangsan@alipay.com"
  }

成功响应:
  {
    "code": 0,
    "data": {
      "id": 123,
      "writer_id": "w24072001"
    },
    "message": "添加成功"
  }

错误响应:
  {
    "code": 1,
    "message": "请求过于频繁，请稍后再试"
  }
或
  {
    "code": 1,
    "message": "写手ID已存在"
  }
或
  {
    "code": 1,
    "message": "当日写手ID序号已用尽"
  }
或
  {
    code: 1,
    message: "服务器错误"
  }

说明:
- 本接口无需登录，任何人可用。
- 每个IP每分钟最多10次，超出会被限流。
- 其它业务逻辑、字段校验与 /api/writers 完全一致。

## 六、订单管理模块

### 1. 获取订单列表
GET /api/orders
描述: 获取订单列表,支持分页和条件查询
请求头:
  - Authorization: Bearer <token>
请求参数:
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
  - order_id: 订单编号(可选,精确匹配)
  - payment_id: 支付单号(可选,精确匹配)
  - status: 订单状态筛选(可选，1-筛选包含"成功"的订单，2-筛选不包含"成功"或为空的订单)
  - channel: 支付渠道(可选,支付宝/企业微信)
  - startTime: 开始时间(可选,订单创建时间范围)
  - endTime: 结束时间(可选,订单创建时间范围)

筛选逻辑:
  - status=1：只返回status字段中包含"成功"的订单（模糊匹配，如"支付成功"、"交易成功"等）
  - status=2：只返回status字段中不包含"成功"或为空的订单
  - 不传status或传其他值：返回全部订单

响应:
  {
    code: 0,
    data: {
      total: 总条数,
      list: [
        {
          order_id: 订单编号,
          payment_id: 支付单号,
          amount: 买家实付金额,
          status: 订单状态,
          create_time: 订单创建时间,
          merchant_remark: 商家备注,
          refund_amount: 卖家实退金额,
          fee: 手续费,
          channel: 渠道,
          confirm_time: 确认收货时间,
          merchant_payment: 打款商家金额,
          created_at: 记录创建时间,
          updated_at: 记录更新时间,
          customer_id: 客服ID,
          customer_name: 客服用户名,
          writer_id: 第一个写手ID,
          writer_name: 第一个写手姓名,
          writer_id_2: 第二个写手ID,
          writer_name_2: 第二个写手姓名
        }
      ]
    },
    message: "获取成功"
  }

### 2. 更新订单客服
PUT /api/orders/:orderId/customer
描述: 为指定订单分配或更换客服
请求头:
  - Authorization: Bearer <token>
请求参数:
  - customer_id: 客服用户ID(必填)
响应:
  {
    code: 0,
    message: "success",
    data: {
      order_id: 订单编号,
      customer_id: 客服用户ID,
      customer: 客服用户名
    }
  }

### 3. 更新订单写手
PUT /api/orders/:orderId/writer
描述: 为指定订单分配或更换写手
请求头:
  - Authorization: Bearer <token>
请求参数:
  - writer_id: 第一个写手ID(可选)
  - writer_id_2: 第二个写手ID(可选)
响应:
  {
    code: 0,
    message: "success",
    data: {
      order_id: 订单编号,
      writer_id: 第一个写手ID,
      writer_id_2: 第二个写手ID
    }
  }
错误响应:
  {
    code: 1,
    message: "指定的写手不存在"
  }
或
  {
    code: 1,
    message: "指定的第二个写手不存在"
  }
  或
  {
    code: 1,
    message: "订单不存在"
  }
  或
  {
    code: 1,
    message: "您没有权限执行此操作"
  }

### 4. 手动合并客服订单到订单总表
POST /api/customer-orders/merge
描述: 手动触发将客服订单表中的客服ID和写手ID信息批量更新到订单总表中，处理所有符合条件的订单
请求头:
  - Authorization: Bearer <token>
请求参数:
  无需参数，系统会自动处理所有符合条件的订单
合并逻辑说明:
  - 系统会查找所有 orders.customer_id 或 writer_id 为空的订单，批量用 customer_orders 的 customer_id、writer_id 进行同步。
  - customer_id 一定同步，writer_id 仅在有值时同步（优先同步第一个写手）。
  - 注意：订单总表(orders)现在支持两个写手，会同步第一个写手(writer_id)和第二个写手(writer_id_2)到订单总表。
  - 同时会同步写手佣金信息：第一个写手佣金(writer_fee)和第二个写手佣金(writer_fee_2)。
  - 支持增量更新：如果订单总表中缺少佣金信息，会自动从客服订单表同步。
  - 同步fee_per_1000字段：如果客服订单表有值，则同步到订单总表。
响应:
  {
    code: 0,
    message: "合并成功",
    data: {
      total: 处理订单总数,
      merged_orders: [
        {
          order_id: 订单编号,
          customer_id: 客服ID,
          writer_id: 第一个写手ID,
          writer_id_2: 第二个写手ID
        }
      ]
    }
  }
错误响应:
  {
    code: 1,
    message: "没有符合条件的订单需要合并"
  }

### 5. 手动修改结算状态
PUT /api/customer-orders/settlement-status
描述: 手动修改客服订单的结算状态，仅限财务/超管操作
权限: 仅限超级管理员和财务角色
请求头:
  - Authorization: Bearer <token>
请求参数:
  - order_id: 订单编号(必填)
  - new_status: 新结算状态(必填，支持：WriterSettled/AllSettled)
状态流转规则:
  - SelfLocked → AllSettled
  - Locked → WriterSettled 或 AllSettled
  - WriterSettled → AllSettled
  - AllSettled 不可修改（最终态）
  - 不允许回退到未结算状态
请求体示例:
  {
    "order_id": "4200002411202506272865982152",
    "new_status": "WriterSettled"
  }
响应:
  {
    code: 0,
    message: "结算状态修改成功",
    data: {
      order_id: "4200002411202506272865982152",
      old_status: "Locked",
      new_status: "WriterSettled",
      updated_at: "2025-01-22T10:30:00.000Z"
    }
  }
错误响应:
  {
    code: 1,
    message: "您没有权限执行此操作，仅限超级管理员和财务角色"
  }
或
  {
    code: 1,
    message: "请提供订单编号和新结算状态"
  }
或
  {
    code: 1,
    message: "订单不存在"
  }
或
  {
    code: 1,
    message: "不允许从 Locked 状态修改为 Pending 状态"
  }

### 8. 锁定客服订单
POST /api/customer-orders/lock
描述: 智能锁定客服订单，只锁定符合条件的订单
权限: 仅限超级管理员和财务角色
请求头:
  - Authorization: Bearer <token>
请求参数:
  - order_ids: 订单ID数组(必填)
请求体示例:
  {
    "order_ids": [1, 2, 3]
  }
锁定条件:
  - 订单必须已定稿 (is_fixed = 1)
  - 订单未结算 (settlement_status = 'pending')
  - 订单未被锁定 (is_locked = 0)
响应:
  {
    code: 0,
    message: "锁定成功",
    data: {
      locked_count: 锁定订单数量,
      locked_orders: [
        {
          id: 订单ID,
          order_id: 订单编号
        }
      ]
    }
  }
错误响应:
  {
    code: 1,
    message: "请提供要锁定的订单ID列表"
  }
或
  {
    code: 1,
    message: "部分订单不存在"
  }
或
  {
    code: 1,
    message: "以下订单已被锁定，无法重复锁定: 订单编号列表"
  }
或
  {
    code: 1,
    message: "以下订单已结算，无需锁定: 订单编号列表"
  }
或
  {
    code: 1,
    message: "以下订单未定稿，建议先定稿再锁定: 订单编号列表"
  }
或
  {
    code: 1,
    message: "您没有权限执行此操作，仅限超级管理员和财务角色"
  }

### 7. 解锁客服订单
POST /api/customer-orders/unlock
描述: 智能解锁客服订单，只解锁未结算订单，保持已结算订单锁定状态
权限: 仅限超级管理员和财务角色
请求头:
  - Authorization: Bearer <token>
请求参数:
  - order_ids: 订单ID数组(必填)
请求体示例:
  {
    "order_ids": [1, 2, 3]
  }
解锁逻辑:
  - 自动解锁 Pending、Eligible、Locked 和 SelfLocked 状态的订单
  - 保持 AllSettled 和 WriterSettled 状态订单锁定状态
响应:
  {
    code: 0,
    message: "解锁成功，X个订单已解锁，Y个已结算订单保持锁定状态",
    data: {
      unlocked_count: 解锁订单数量,
      kept_locked_count: 保持锁定订单数量,
      unlocked_orders: [
        {
          id: 订单ID,
          order_id: 订单编号
        }
      ],
      kept_locked_orders: [
        {
          id: 订单ID,
          order_id: 订单编号
        }
      ]
    }
  }
错误响应:
  {
    code: 1,
    message: "请提供要解锁的订单ID列表"
  }
或
  {
    code: 1,
    message: "部分订单不存在"
  }
或
  {
    code: 1,
    message: "以下订单未被锁定，无法解锁: 订单编号列表"
  }
或
  {
    code: 1,
    message: "您没有权限执行此操作，仅限超级管理员和财务角色"
  }

### 8. 手动全量重算客服佣金
POST /api/orders/recalculate-commission
描述: 遍历orders表所有订单，按最新规则重新计算customer_commission，并同步到customer_orders表。仅限超级管理员和财务角色可用。

权限:
  - 仅限超级管理员和财务角色

请求头:
  - Authorization: Bearer <token>

请求参数:
  无需参数

响应:
  {
    code: 0,
    message: "全量重算完成，共处理 1234 个订单",
    data: {
      sample: [
        {
          order_id: "4200002411202506272865982152",
          commission: 51.85
        },
        {
          order_id: "4200002695202506056256409385",
          commission: 91.85
        }
        // ...最多10条示例
      ],
      total: 1234
    }
  }

错误响应:
  {
    code: 1,
    message: "您没有权限执行此操作，仅限超级管理员和财务角色"
  }
或
  {
    code: 1,
    message: "服务器错误",
    error: "错误信息"
  }

说明:
- 该接口会对所有orders表订单按最新规则重算客服佣金，并同步到customer_orders表。
- **定稿状态判断**：只有客服订单表中is_fixed=1（已定稿）的订单才会参与佣金计算。
- 返回处理订单总数和部分示例数据。
- 幂等安全，可多次调用。

## 七、统计模块

### 1. 获取系统统计数据
GET /api/statistics
描述: 获取系统各项数据统计
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: {
      userCount: 用户总数,
      menuCount: 菜单总数,
      roleCount: 角色总数,
      writerCount: 写手总数,
      orderCount: 订单总数,
      sevenDaysAmount: [  // 最近7天每日订单金额统计
        {
          date: "2024-03-10",  // 日期，格式：YYYY-MM-DD
          amount: 1000.00      // 当日订单金额总和
        }
        // ... 共7天的数据
      ],
      channelOrders: {  // 各渠道订单数统计
        "支付宝": 100,   // 支付宝渠道订单数
        "企业微信": 50    // 企业微信渠道订单数
        // 可能包含其他渠道
      }
    },
    message: "获取成功"
  }
说明：
1. sevenDaysAmount 数组包含最近7天的每日订单金额统计
2. 统计的起止时间：以最后一笔订单的创建时间为截止时间，向前推7天
3. amount 为当天所有订单的买家实付金额(amount字段)总和
4. 数据按日期升序排序
5. channelOrders 对象包含各支付渠道的订单总数统计

## 八、客服订单管理模块

### 1. 创建客服订单
POST /api/customer-orders
描述: 客服填报新订单
请求头:
  - Authorization: Bearer <token>
请求参数:
  - order_id: 订单编号(必填)
  - date: 日期(必填，格式：YYYY-MM-DD)
  - is_fixed: 是否定稿(必填，0-未定稿，1-已定稿)
  - order_content: 稿件内容信息(可选)
  - word_count: 稿件字数(可选)
  - fee: 第一个写手的稿费(可选)
  - customer_id: 客服ID(可选，默认为当前登录用户)
  - writer_id: 第一个写手ID(可选)
  - fee_2: 第二个写手的稿费(可选)
  - writer_id_2: 第二个写手ID(可选)
  - dispatch_id: 派单编号(可选，唯一，非必填)
  - exchange_time: 交稿时间(可选)
  - payment_channel: 付款渠道(可选)
  - store_name: 店铺名或客户线下(可选)
  - new_customer: 是否新客户(可选，0-否，1-是)
  - customer_name: 订单客户的名称(可选，不是客服名称)
  - order_amount: 订单下单金额(可选)
  - refund_amount: 退款金额(可选)
  - special_situation: 特殊情况(不结算)(可选)
  - fee_per_1000: 每一千字/费用(可选，decimal，前端可不传或为空)
字段校验说明:
  - dispatch_id 如有填写，必须唯一，否则返回"派单编号已存在"。
  - writer_id 非必填，如有填写，需为有效写手ID，否则返回"指定的写手不存在"。
  - writer_id_2 非必填，如有填写，需为有效写手ID，否则返回"指定的第二个写手不存在"。
  - order_id 必须唯一，否则返回"订单号已存在"。
响应:
  {
    code: 0,
    message: "创建成功",
    data: {
      id: 订单ID,
      order_id: 订单编号
    }
  }
错误响应:
  {
    code: 1,
    message: "订单号已存在"
  }
  或
  {
    code: 1,
    message: "派单编号已存在"
  }
  或
  {
    code: 1,
    message: "指定的写手不存在"
  }
  或
  {
    code: 1,
    message: "指定的第二个写手不存在"
  }
  或
  {
    code: 1,
    message: "您没有权限执行此操作"
  }

### 2. 获取客服订单列表
GET /api/customer-orders
描述: 获取客服订单列表，支持分页和条件查询
请求头:
  - Authorization: Bearer <token>
请求参数:
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
  - order_id: 订单编号(可选，精确匹配)
  - date_start: 开始日期(可选，格式：YYYY-MM-DD)
  - date_end: 结束日期(可选，格式：YYYY-MM-DD)
  - customer_id: 客服ID(可选)
  - writer_id: 写手ID(可选，仅支持第一个写手)
  - is_fixed: 是否定稿(可选，0-未定稿，1-已定稿)
  - dispatch_id: 派单编号(可选，精确匹配)
  - customer_name: 客户名称(可选，模糊匹配)
  - fee_min: 稿费最小值(可选，总稿费 = 第一个写手稿费 + 第二个写手稿费)
  - fee_max: 稿费最大值(可选，总稿费 = 第一个写手稿费 + 第二个写手稿费)
  - order_amount_min: 订单金额最小值(可选)
  - order_amount_max: 订单金额最大值(可选)
  - settlement_status: 结算状态(可选，支持：Pending/Eligible/Locked/SelfLocked/WriterSettled/AllSettled)
  - is_locked: 是否锁定(可选，0-未锁定，1-已锁定)
响应:
  {
    code: 0,
    data: {
      total: 总条数,
      list: [
        {
          id: 订单ID,
          order_id: 订单编号,
          date: 日期,
          is_fixed: 是否定稿,
          order_content: 稿件内容信息,
          word_count: 稿件字数,
          fee: 第一个写手的稿费,
          customer_id: 客服ID,
          customer_service_name: 客服用户名,
          writer_id: 第一个写手ID,
          writer_name: 第一个写手姓名,
          fee_2: 第二个写手的稿费,
          writer_id_2: 第二个写手ID,
          writer_name_2: 第二个写手姓名,
          exchange_time: 交稿时间,
          payment_channel: 付款渠道,
          store_name: 店铺名或客户线下,
          new_customer: 是否新客户,
          customer_name: 客户名称,
          order_amount: 订单下单金额,
          refund_amount: 退款金额,
          special_situation: 特殊情况(不结算),
          dispatch_id: 派单编号,
          total_fee: 总稿费(第一个写手稿费 + 第二个写手稿费),
          is_locked: 是否锁定(0-未锁定,1-已锁定),
          locked_by: 锁定人ID,
          locked_at: 锁定时间,
          locked_by_name: 锁定人用户名,
          settlement_status: 结算状态(Pending/Eligible/Locked/SelfLocked/WriterSettled/AllSettled),
          created_at: 记录创建时间,
          updated_at: 记录更新时间
        }
      ]
    },
    message: "获取成功"
  }

### 3. 获取客服订单详情
GET /api/customer-orders/:id
描述: 获取客服订单详情
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: {
      // 订单详细信息，字段同列表接口
      // 包括新增的锁定相关字段：
      // is_locked: 是否锁定(0-未锁定,1-已锁定)
      // locked_by: 锁定人ID
      // locked_at: 锁定时间
      // locked_by_name: 锁定人用户名
    },
    message: "获取成功"
  }
错误响应:
  {
    code: 1,
    message: "订单不存在"
  }

### 4. 更新客服订单
PUT /api/customer-orders/:id
描述: 更新客服订单信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  // 同创建接口，所有字段均为可选
  - fee_per_1000: 每一千字/费用(可选，decimal，前端可不传或为空)
字段校验说明:
  - dispatch_id 如有填写，必须唯一，否则返回"派单编号已存在"。
  - writer_id 非必填，如有填写，需为有效写手ID，否则返回"指定的写手不存在"。
  - writer_id_2 非必填，如有填写，需为有效写手ID，否则返回"指定的第二个写手不存在"。
  - order_id 必须唯一，否则返回"订单号已存在"。
权限控制:
  - 只有录入客服可以修改订单
  - 订单号不允许修改，如需修改请删除后重新录入
  - 定稿状态修改权限：
    * 稿费 < 100：客服可以修改定稿状态
    * 稿费 ≥ 100：只有管理/财务可以修改定稿状态
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "订单号已存在"
  }
  或
  {
    code: 1,
    message: "派单编号已存在"
  }
  或
  {
    code: 1,
    message: "指定的写手不存在"
  }
  或
  {
    code: 1,
    message: "指定的第二个写手不存在"
  }
  或
  {
    code: 1,
    message: "订单不存在"
  }
  或
  {
    code: 1,
    message: "订单已被锁定，仅限超级管理员和财务角色可以修改"
  }
  或
  {
    code: 1,
    message: "只有录入客服可以修改订单"
  }
  或
  {
    code: 1,
    message: "订单号不允许修改，如需修改请删除后重新录入"
  }
  或
  {
    code: 1,
    message: "稿费大于等于100的订单，只有管理/财务可以修改定稿状态"
  }

### 5. 删除客服订单
DELETE /api/customer-orders/:id
描述: 删除客服订单
请求头:
  - Authorization: Bearer <token>
权限控制:
  - 只有超级管理员可以删除客服订单
  - 只有未结算状态的订单可以删除（Pending/Eligible）
  - 已锁定的订单不允许删除
响应:
  {
    code: 0,
    message: "删除成功"
  }
错误响应:
  {
    code: 1,
    message: "订单不存在"
  }
  或
  {
    code: 1,
    message: "只有超级管理员可以删除客服订单"
  }
  或
  {
    code: 1,
    message: "只有未结算状态的订单可以删除"
  }
  或
  {
    code: 1,
    message: "已锁定的订单不允许删除"
  }

### 6. 导出客服佣金明细
GET /api/customer-orders/export-commission-data
描述: 导出指定时间周期内客服订单表每一条数据，包含客服佣金、写手稿费及写手支付宝信息等关键字段，并返回全局汇总、客服汇总、写手汇总。仅限超级管理员和财务角色。支持防止重复导出机制。

权限:
  - 仅限超级管理员和财务角色

请求头:
  - Authorization: Bearer <token>

请求参数:
  - start: 开始日期(必填，格式YYYY-MM-DD)
  - end: 结束日期(必填，格式YYYY-MM-DD)
  - settlement_status: 结算状态(可选，支持单选或多选，多个状态用英文逗号分隔，如 Eligible,Locked，支持值：Pending,Eligible,Locked,SelfLocked,WriterSettled,AllSettled)

防止重复导出机制:
  - 筛选Locked状态时：只导出writer_settlement_exported=0的订单（未导出写手打款）
  - 筛选WriterSettled或SelfLocked状态时：只导出customer_settlement_exported=0的订单（未导出客服打款）
  - 状态更新为WriterSettled时：自动设置writer_settlement_exported=1
  - 状态更新为AllSettled时：自动设置customer_settlement_exported=1

响应:
  {
    code: 0,
    data: {
      orders: [
        {
          id: 订单ID,
          order_id: 订单编号,
          dispatch_id: 派单编号, // 新增，客服录入，写手对账用
          date: 日期,
          customer_id: 客服ID,
          customer_service_name: 客服用户名,
          customer_commission: 客服佣金,
          writer_id: 第一个写手ID,
          writer_name: 第一个写手姓名,
          fee: 第一个写手稿费,
          writer_alipay_name: 第一个写手支付宝姓名,
          writer_alipay_account: 第一个写手支付宝账号,
          writer_id_2: 第二个写手ID,
          writer_name_2: 第二个写手姓名,
          fee_2: 第二个写手稿费,
          writer2_alipay_name: 第二个写手支付宝姓名,
          writer2_alipay_account: 第二个写手支付宝账号,
          settlement_status: 结算状态(Pending/Eligible/Locked/SelfLocked/WriterSettled/AllSettled)
        },
        ...
      ],
      summary: {
        order_count: 订单数量,
        customer_commission_total: 客服佣金总和,
        writer_fee_total: 写手佣金总和
      },
      customer_summary: [
        {
          customer_id: 客服ID,
          customer_service_name: 客服用户名,
          order_count: 订单数,
          customer_commission_total: 客服佣金总和
        },
        ...
      ],
      writer_summary: [
        {
          writer_id: 写手ID,
          writer_name: 写手姓名,
          writer_alipay_name: 支付宝姓名,
          writer_alipay_account: 支付宝账号,
          order_count: 订单数,
          writer_fee_total: 写手稿费总和
        },
        ...
      ]
    }
  }

说明:
- 只统计customer_commission非0/非0.00/非NULL/非空的订单，正负数都统计。
- 写手汇总会合并写手1和写手2的所有稿费。
- 前端可直接用返回数据生成csv/excel。
- 响应的orders数据包含dispatch_id（派单编号）字段，并说明其含义。

## 九、写手评分管理模块

### 1. 添加/更新写手评分
POST /api/writers/:writerId/ratings
描述: 为指定写手添加今日评分(每日仅能添加一次,若已存在则更新)
权限: 质检、主管及超级管理员角色可操作
请求头:
  - Authorization: Bearer <token>
请求参数:
  - score: 评分(必填，1-10分，支持小数点后一位)
  - comment: 评价内容(必填)
响应:
  {
    code: 0,
    message: "评分保存成功" 或 "评分更新成功",
    data: {
      id: 评分记录ID
    }
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }
或
  {
    code: 1,
    message: "评分必须在1到10之间"
  }
或
  {
    code: 1,
    message: "评价内容不能为空"
  }
或
  {
    code: 1,
    message: "没有权限执行此操作，仅限质检人员、主管及超级管理员"
  }

### 2. 获取写手评分历史
GET /api/writers/:writerId/ratings
描述: 获取指定写手的评分历史
请求头:
  - Authorization: Bearer <token>
请求参数:
  - start_date: 开始日期(可选，格式：YYYY-MM-DD)
  - end_date: 结束日期(可选，格式：YYYY-MM-DD)
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
响应:
  {
    code: 0,
    message: "success",
    data: {
      writer: {
        id: 写手ID,
        writer_id: "写手编号",
        name: "写手姓名"
      },
      total: 总条数,
      list: [
        {
          id: 记录ID,
          score: 8.5,
          comment: "工作认真，质量高",
          date: "2024-03-30",
          created_at: "2024-03-30 10:30:00",
          updated_at: "2024-03-30 10:30:00",
          quality_inspector: {
            id: 质检员ID,
            name: "质检员姓名"
          }
        }
      ]
    }
  }

### 3. 获取指定写手当天评分记录
GET /api/writers/:writerId/today-rating
描述: 获取指定写手当天的评分记录(如果存在)
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "success",
    data: {
      id: 记录ID,
      score: 8.5,
      comment: "工作认真，质量高",
      date: "2024-03-30",
      created_at: "2024-03-30 10:30:00",
      updated_at: "2024-03-30 10:30:00",
      writer: {
        id: 写手ID,
        writer_id: "写手编号",
        name: "写手姓名"
      },
      quality_inspector: {
        id: 质检员ID,
        name: "质检员姓名"
      }
    }
  }
或:
  {
    code: 0,
    message: "success",
    data: null  // 表示今天尚未评分
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 4. 获取指定写手特定日期评分记录
GET /api/writers/:writerId/rating-by-date
描述: 获取指定写手特定日期的评分记录(如果存在)
请求头:
  - Authorization: Bearer <token>
请求参数:
  - date: 日期(可选，默认今天，格式：YYYY-MM-DD)
响应:
  {
    code: 0,
    message: "success",
    data: {
      id: 记录ID,
      score: 8.5,
      comment: "工作认真，质量高",
      date: "2024-03-30",
      created_at: "2024-03-30 10:30:00",
      updated_at: "2024-03-30 10:30:00",
      writer: {
        id: 写手ID,
        writer_id: "写手编号",
        name: "写手姓名"
      },
      quality_inspector: {
        id: 质检员ID,
        name: "质检员姓名"
      }
    }
  }
或:
  {
    code: 0,
    message: "success",
    data: null  // 表示指定日期尚未评分
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 5. 获取某日所有写手评分
GET /api/writer-ratings/daily
描述: 获取某一天所有写手的评分情况
请求头:
  - Authorization: Bearer <token>
请求参数:
  - date: 日期(可选，默认今天，格式：YYYY-MM-DD)
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
响应:
  {
    code: 0,
    message: "success",
    data: {
      date: "2024-03-30",
      total: 总条数,
      list: [
        {
          id: 记录ID,
          writer: {
            id: 写手ID,
            writer_id: "写手编号",
            name: "写手姓名"
          },
          score: 8.5,
          comment: "工作认真，质量高",
          created_at: "2024-03-30 10:30:00",
          quality_inspector: {
            id: 质检员ID,
            name: "质检员姓名"
          }
        }
      ]
    }
  }

### 6. 获取未评分的写手列表
GET /api/writer-ratings/unrated
描述: 获取今日尚未评分的写手列表
权限: 质检、主管及超级管理员角色可访问
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "success",
    data: [
      {
        id: 写手ID,
        writer_id: "写手编号",
        name: "写手姓名"
      }
    ]
  }

## 十、案例管理模块

### 1. 获取案例列表
GET /api/cases
描述: 获取案例列表，支持分页和按类型筛选
权限: 超级管理员、主管、客服及质检人员可访问
请求头:
  - Authorization: Bearer <token>
请求参数:
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
  - case_type: 案例类型(可选,筛选特定类型案例)
响应:
  {
    code: 0,
    data: {
      total: 总条数,
      list: [
        {
          id: "CASE-001",
          case_type: "聊天话术",
          title: "产品推荐话术",
          content: "案例内容正文...",
          images: [  // 图片URL数组
            "http://118.31.76.202:3000/upload/202403/1712345678_1234.jpg",
            "http://118.31.76.202:3000/upload/202403/1712345679_5678.jpg"
          ],
          created_at: "2024-03-30 10:30:00",
          updated_at: "2024-03-30 10:30:00",
          creator: {
            id: 创建人ID,
            name: "创建人姓名"
          }
        }
      ]
    },
    message: "获取成功"
  }

### 2. 获取案例详情
GET /api/cases/:id
描述: 获取案例详情
权限: 超级管理员、主管、客服及质检人员可访问
请求头:
  - Authorization: Bearer <token>
路径参数:
  - id: 案例ID
响应:
  {
    code: 0,
    data: {
      id: "CASE-001",
      case_type: "聊天话术",
      title: "产品推荐话术",
      content: "案例内容正文...",
      images: [  // 图片URL数组
        "http://118.31.76.202:3000/upload/202403/1712345678_1234.jpg",
        "http://118.31.76.202:3000/upload/202403/1712345679_5678.jpg"
      ],
      created_at: "2024-03-30 10:30:00",
      updated_at: "2024-03-30 10:30:00",
      creator: {
        id: 创建人ID,
        name: "创建人姓名"
      }
    },
    message: "获取成功"
  }
错误响应:
  {
    code: 1,
    message: "案例不存在"
  }

### 3. 创建案例
POST /api/cases
描述: 上传新案例，支持多张图片上传
权限: 超级管理员、主管、客服及质检人员可访问
请求头:
  - Authorization: Bearer <token>
  - Content-Type: multipart/form-data
请求参数:
  - case_type: 案例类型(必填)
  - title: 案例标题(必填)
  - content: 案例内容(必填)
  - images: 图片文件(可选,最多10张,每张不超过2MB)
响应:
  {
    code: 0,
    data: {
      id: "CASE-001",
      images: [
        "http://118.31.76.202:3000/upload/202403/1712345678_1234.jpg",
        "http://118.31.76.202:3000/upload/202403/1712345679_5678.jpg"
      ]
    },
    message: "创建成功"
  }
错误响应:
  {
    code: 1,
    message: "案例类型、标题和内容不能为空"
  }
或
  {
    code: 1,
    message: "图片上传失败: 只能上传图片文件!"
  }
或
  {
    code: 1,
    message: "图片上传失败: 单张图片不能超过2MB"
  }

### 4. 删除案例
DELETE /api/cases/:id
描述: 删除案例及其关联的图片文件
权限: 超级管理员、主管、客服及质检人员可访问
请求头:
  - Authorization: Bearer <token>
路径参数:
  - id: 案例ID
响应:
  {
    code: 0,
    message: "删除成功"
  }
错误响应:
  {
    code: 1,
    message: "案例不存在"
  }
或
  {
    code: 1,
    message: "没有权限执行此操作，仅限超级管理员、主管、客服及质检人员"
  }

API: /customer-orders/export
方法: GET
描述: 导出客服订单（支持日期区间、结算状态筛选、权限控制）
请求参数:
  - start: 字符串，必填，导出开始日期（yyyy-mm-dd）
  - end: 字符串，必填，导出结束日期（yyyy-mm-dd）
  - settlement_status: 字符串，可选，结算状态（支持：Pending/Eligible/Locked/SelfLocked/WriterSettled/AllSettled，多个状态用英文逗号分隔），默认全部
权限:
  - 超级管理员、财务：可导出全部订单
  - 客服：仅可导出自己录入的订单
  - 其它角色：无权限
响应:
  - code: 状态码
  - message: 描述信息
  - data:
      - orders: 订单明细数组，每条包含如下字段：
          - id: 订单主键
          - order_id: 订单编号
          - dispatch_id: 派单编号
          - date: 订单日期
          - customer_id: 客服ID
          - customer_service_name: 客服姓名
          - writer_id: 写手业务编号
          - writer_name: 写手姓名
          - writer_id_2: 第二写手业务编号
          - writer_name_2: 第二写手姓名
          - order_amount: 订单下单金额
          - refund_amount: 退款金额
          - fee: 第一个写手稿费
          - fee_2: 第二个写手稿费
          - fee_per_1000: 每千字费用
          - customer_commission: 客服佣金
          - settlement_status: 结算状态
          - is_settled: 是否已结算（只要 customer_commission 非null、非空、非0、非0.00 即视为已结算，布尔值）
错误码:
  - 400: 参数错误
  - 403: 权限不足
  - 500: 服务器错误